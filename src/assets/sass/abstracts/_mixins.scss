@mixin clearfix {
    &::after {
        content: "";
        display: table;
        clear: both;
    }
}

@mixin absCenter {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
}

// // MEDIA QUERY MANAGER (USING *BOOTSTRAP* STANDARD BREAKPOINT)
// /*
// Using max-width Media Queries except xxl device
// 0 - 576px       ==> xs =>  X-Small devices (portrait phones, less than 576px)
// 576px - 768px   ==> sm =>  Small devices (landscape phones, less than 768px)
// 768px - 992px   ==> md =>  Medium devices (tablets, less than 992px)
// 992px - 1200px    ==> lg =>  Large devices (desktops, less than 1200px)
// 1200 - 1400px   ==> xl =>  X-Large devices (large desktops, less than 1400px)
// 1400 - ****px   ==> xxl=>   XX-Large devices (larger desktops) => Using min-width media query since the xxl breakpoint has no upper bound on its width

// $breakpoint arguement choices:
// Using max-width Media Queries except xxl device
// xs =>  X-Small devices (portrait phones, less than 576px)
// sm =>  Small devices (landscape phones, less than 768px)
// md =>  Medium devices (tablets, less than 992px)
// lg =>  Large devices (desktops, less than 1200px)
// xl =>  X-Large devices (large desktops, less than 1400px)
// xxl=>   XX-Large devices (larger desktops) => Using min-width media query since the xxl breakpoint has no upper bound on its width

// ORDER: Base + typography > general layout + grid > page layout > components

// 1em = 16px
// */

@mixin mediaDesktopFirst($breakpoint) {
    // Desktop First Media Queries
    @if $breakpoint == lg {
        // 75em = 1200px
        @media only screen and (max-width: 75em) {
            @content;
        }
    }
    @if $breakpoint == md {
        // 62em = 992px
        @media only screen and (max-width: 62em) {
            @content;
        }
    }
    @if $breakpoint == sm {
        // 48em = 768px
        @media only screen and (max-width: 48em) {
            @content;
        }
    }
    @if $breakpoint == xs {
        // 36em = 576px
        @media only screen and (max-width: 36em) {
            @content;
        }
    }
    @if $breakpoint == xxl {
        // 87.5em = 1400px ==> using min-width
        @media only screen and (min-width: 87.5em) {
            @content;
        }
    }
}

// // Switch Toggle Size & color mixins
@mixin switchToggleSizeColor($switchSize: "sm", $switchCheckedColor: "blue") {
    // // SIZE -----------------------------------------
    // YOU CAN PUT ALL RESOLUTION HERE
    // sm - DEFAULT, md, lg, xl

    --switch_unchecked_slider_color: #9e9e9e;
    --switch_unchecked_knob_color: #fafafa;
    --switch_checked_color: #{$switchCheckedColor};

    --switch_slider_height: 0.875rem;
    --switch_knob_size: 1.25rem;

    @if $switchSize == "sm" {
        --switch_slider_height: 0.875rem;
        --switch_knob_size: 1.25rem;
    } @else if $switchSize == "md" {
        --switch_slider_height: 1rem;
        --switch_knob_size: 1.5rem;
    } @else if $switchSize == "lg" {
        --switch_slider_height: 1.5rem;
        --switch_knob_size: 2rem;
    } @else if $switchSize == "xl" {
        --switch_slider_height: 2rem;
        --switch_knob_size: 3rem;
    }

    display: inline-block;
    input {
        display: none;
    }

    label {
        position: relative;
        display: inline-block;
        min-width: calc(var(--switch_slider_height) * 3);
        cursor: pointer;
        text-align: left;
    }

    label:before,
    label:after {
        content: "";
        position: absolute;
        margin: 0;
        outline: 0;
        top: 50%;
        -ms-transform: translate(0, -50%);
        -webkit-transform: translate(0, -50%);
        transform: translate(0, -50%);
        -webkit-transition: all 0.3s ease;
        transition: all 0.3s ease;
    }

    label:before {
        left: 1px;
        width: calc(var(--switch_slider_height) * 2.5);
        height: var(--switch_slider_height);
        background-color: var(--switch_unchecked_slider_color);
        border-radius: calc(var(--switch_slider_height) / 2);
    }

    label:after {
        left: 0;
        width: var(--switch_knob_size);
        height: var(--switch_knob_size);
        background-color: var(--switch_unchecked_knob_color);
        border-radius: 50%;
        box-shadow: 0 3px 1px -2px rgba(0, 0, 0, 0.14), 0 2px 2px 0 rgba(0, 0, 0, 0.098),
            0 1px 5px 0 rgba(0, 0, 0, 0.084);
    }

    input:checked + label:before {
        opacity: 0.5;
        background-color: var(--switch_checked_color);
    }

    input:checked + label:after {
        background-color: var(--switch_checked_color);
        left: calc(calc(var(--switch_slider_height) * 2.6) - var(--switch_knob_size));
    }
}
